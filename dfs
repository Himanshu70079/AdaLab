#include <iostream>
#include <stack>
#include <chrono>
#include <sys/resource.h>
using namespace std;

void DFS(int start, int graph[][5], int visited[]) {
    stack<int> explore;
    explore.push(start);

    while (!explore.empty()) {
        int node = explore.top();
        explore.pop();

        if (visited[node] == 0) {
            cout << node << '\t';
            visited[node] = 1;
        }

        for (int i = 0; i < 5; i++) {
            if (graph[node][i] == 1 && visited[i] == 0) {
                explore.push(i);
            }
        }
    }
}

int main() {
    stack<int> explore;
    int start = 0;
    int visited[5] = {0, 0, 0, 0, 0};
    int graph[5][5] = {
        {0, 1, 1, 1, 0},
        {1, 0, 1, 0, 0},
        {1, 1, 0, 0, 1},
        {1, 0, 0, 0, 0},
        {0, 0, 1, 0, 0},
    };

    cout << "DFS traversal starting from node " << start << " is: ";

    struct rusage r_usage;
    getrusage(RUSAGE_SELF, &r_usage);
    auto start_time = chrono::high_resolution_clock::now();
    DFS(start, graph, visited);
    auto end_time = chrono::high_resolution_clock::now();

    chrono::duration<double> duration = end_time - start_time;
    cout << "\nTime taken for DFS: " << duration.count() << " seconds" << endl;

    cout << "Memory usage: " << r_usage.ru_maxrss << " kilobytes" << endl;

    return 0;
}
